[tool.poetry]
name = "game-solution"
version = "0.1.0"
description = "Multi-game solution with tic-tac-toe and shared framework"
authors = ["AI Assistant <ai@example.com>"]
readme = "README.md"
packages = [
    {include = "tic_tac_toe", from = "src"},
    {include = "game_framework", from = "src"},
]

[tool.poetry.dependencies]
python = "^3.9"
pygame = "^2.5.0"
numpy = "^1.21.0"
click = "^8.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
mypy = "^1.5.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pre-commit = "^3.3.0"

[tool.poetry.group.test.dependencies]
pytest-mock = "^3.11.0"
pytest-asyncio = "^0.21.0"
factory-boy = "^3.3.0"

[tool.poetry.scripts]
tic-tac-toe = "tic_tac_toe.app:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "system: System/end-to-end tests",
    "performance: Performance and load tests",
    "ui: User interface tests",
    "x_wins: Tests where X wins",
    "o_wins: Tests where O wins", 
    "tie_game: Tests that result in a tie",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
